@startuml

actor "Customer Manager" as Agent
participant ":NotifyCandidatesUI" as ui <<UI>>
participant ":NotifyCandidatesController" as ctrl <<Application>>
participant ":NotifyCandidatesService" as appServ <<Service>>
participant ":JobOpeningProcessRepository" as jobRepo <<Persistence>>
participant ":ApplicationRepository" as appRepo <<Persistence>>
participant ":JobOpeningApplication" as app <<Domain>>

autonumber

activate Agent

Agent -> ui: notify candidates by email
activate ui

ui --> Agent : S
ui -> ctrl: findAllJobOpeningInAnalysis()
activate ctrl
ctrl -> appServ: findAllJobOpeningInAnalysis()
activate appServ
appServ -> jobRepo: findAllInAnalysis()
activate jobRepo
jobRepo --> appServ: openings
deactivate
appServ --> ctrl: openings
deactivate
ctrl --> ui: openings
deactivate
ui --> Agent: Show list of applicable job openings
deactivate
Agent -> ui : Select a job opening
activate ui



ui -> ctrl: allApplicationsForJobOpening(opening)

activate ctrl

ctrl -> appServ: findAllJobOpeningApplicationsInAnalysis(opening)




activate appServ
appServ -> appRepo: findAllByJobOpening(opening)
activate appRepo
appRepo --> appServ: applications
deactivate

appServ --> ctrl: applications
deactivate

ctrl --> ui: applications
deactivate

ui --> Agent : Show list of applications for the selected job opening
alt User wants to re-rank an application
loop while ranking all applications

ui --> Agent : Requests new ranking

Agent -> ui : Provides new ranking
ui -> ctrl : rankApplication(app, ranking)

activate ctrl
ctrl -> appServ : rankApplication(app, ranking)

activate appServ

appServ -> app : rankApplication(rank)


activate app

app --> appServ : void

deactivate app



appServ -> appRepo : save(app)
activate appRepo
appRepo --> appServ : app
deactivate
appServ --> ctrl : app
deactivate
ctrl --> ui : app
deactivate
ui --> Agent  : Confirms new ranking


end loop

deactivate Agent



@enduml