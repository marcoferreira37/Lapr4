@startuml

actor "Customer Manager" as Agent
participant ":NotifyCandidatesUI" as ui <<UI>>
participant ":NotifyCandidatesController" as ctrl <<Application>>
participant ":NotifyCandidatesService" as appServ <<Service>>

participant ":CandidateRepository" as candRepo <<Persistence>>
'participant ":ApplicationRepository" as appRepo <<Persistence>>
'participant ":JobOpeningApplication" as app <<Domain>>
participant "EmailServer" as server <<Server>>

autonumber

activate Agent

Agent -> ui: notify candidates by email
activate ui

ui -> ctrl: findCandidates()
deactivate ui
activate ctrl

ctrl -> appServ: findCandidates()

deactivate ctrl

activate appServ

appServ -> candRepo: findAllCandidates()
deactivate appServ

activate candRepo

candRepo --> appServ: candidates
deactivate candRepo
activate appServ
deactivate candRepo


appServ --> ctrl: candidates
deactivate appServ
activate ctrl

deactivate appServ
ctrl --> ui: candidates
deactivate ctrl
activate ui

deactivate ctrl




ui --> Agent : Show list of candidates to be notified
deactivate ui
Agent -> ui: Select a candidate
activate ui

ui -> ctrl: sendEmail(destination, subject, message)
deactivate ui

activate ctrl

ctrl -> appServ: sendEmail(destination, subject, message)
deactivate ctrl
activate appServ

appServ -> server: sendEmail(destination, subject, message)
deactivate appServ

activate server

server --> appServ: email
deactivate server

activate appServ

appServ --> ctrl: email
deactivate appServ

activate ctrl

ctrl --> ui: email
deactivate ctrl


activate ui

ui --> Agent : Email sent

deactivate ui






deactivate Agent



@enduml