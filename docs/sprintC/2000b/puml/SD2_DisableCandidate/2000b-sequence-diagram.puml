@startuml

title Disable Candidate - Sequence Diagram

autonumber
actor Operator as ADM
participant "DisableCandidateUI" as UI <<ui>>
participant ":DisableCandidateController" as CTRL <<application>>
participant ":CandidateManagementService" as CMS <<Service>>
participant "AuthorizationService" as AS <<Service>>
participant "CandidateRepository" as REPO <<repository>>
participant "Candidate" as EU <<domain>>
participant "SystemUser" as SYS <<domain>>

activate ADM
ADM-> UI : Request to enable a candidate
activate UI
UI -> CTRL** : create
UI --> UI: listEnabledCandidates()
UI-> CTRL :enabledCandidates()
activate CTRL
CTRL-->CMS: allCandidate()
activate CMS
CMS->AS: ensureAuthenticatedUserHasAnyOf(BaseRoles.POWER_USER, BaseRoles.ADMIN, BaseRoles.OPERATOR, BaseRoles.CUSTOMER_MANAGER)
activate AS
AS-->CMS: ensures the user has the required role
deactivate AS
CMS->REPO: findAllCandidates()
activate REPO
REPO-->CMS: all candidates
deactivate REPO
CMS-->CTRL: all candidates
deactivate CMS
CTRL-->UI: all candidates
deactivate CTRL
UI-->UI: printCandidates(candidates)
UI-->ADM: returns a list of the enabled candidates
deactivate UI
ADM -> UI : selects an enabled candidate
activate UI
UI -> CTRL : disableCandidate(email)
activate CTRL
CTRL->CMS: disableCandidate(email)
activate CMS
CMS->AS:ensureAuthenticatedUserHasAnyOf(BaseRoles.OPERATOR, BaseRoles.ADMIN)
activate AS
AS--> CMS: ensures the user has operator role
deactivate AS
CMS->REPO: findAll()
activate REPO
REPO-->CMS: finds all candidates
deactivate REPO
CMS->EU:.user()
activate EU
EU->SYS:.deactivate(Calendar.getInstance())
activate SYS
SYS-->EU: candidate deactivated
deactivate SYS
EU-->CMS: candidate deactivated
deactivate EU
CMS->REPO:.save(candidate)
activate REPO
REPO-->CMS: candidate disabled
deactivate REPO
CMS-->CTRL: candidate disabled
deactivate CMS
CTRL-->UI: candidate disabled
deactivate CTRL
UI-->ADM: candidate disabled and success message


@enduml
