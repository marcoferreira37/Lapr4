@startuml
'https://plantuml.com/use-case-diagram
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
autonumber

actor "Customer" as Can
participant ":CustomerApp" as CA
participant ":Protocol" as Pro
participant ":ClientThread" as CT
participant ":Packet" as Pkt
participant ":ObjectInputStream" as OIS
participant ":ObjectOutputStream" as OOS
participant ":NotificationService" as nSvc
participant ":AuthorizationService" as Auth
participant ":LoginDTO" as LDTO
participant ":ListJobOpeningsController" as LAC
participant ":Socket" as Sock

activate Can
Can -> CA: Enters the app
activate CA
CA -> Sock: Sock("127.0.0.1", 10099)
activate Sock
Sock --> CA: Sock
deactivate Sock
CA -> Pro: Protocol(Socket)
activate Pro
Pro -> OOS: ObjectOutputStream(socket.getOutputStream())
activate OOS
OOS --> Pro: ObjectOutputStream
deactivate OOS
Pro -> OIS: ObjectInputStream(socket.getInputStream())
activate OIS
OIS --> Pro: ObjectInputStream
deactivate OIS
Pro --> CA: Protocol
deactivate Pro
CA -> Can: requests username
deactivate CA
Can -> CA: Enters username
activate CA
CA -> Can: requests password
deactivate CA
Can -> CA: Enters password
activate CA
CA -> Pro:protocol.send(ComCodes.AUTH.getValue(), new LoginDTO(username, password, BaseRoles.CUSTOMER_MANAGER));

activate Pro
Pro -> OOS: writeObject(new Packet(VERSION, code, object))
activate OOS
deactivate OOS
Pro -> Pkt: in.readObject()
activate Pkt
Pkt --> Pro: Packet
deactivate Pkt
Pro -> Sock: Packet
activate Sock
Sock -> CT: Packet
deactivate Pro
activate CT
CT -> Auth: AuthorizationService()
activate Auth
Auth --> CT: AuthorizationService
deactivate Auth
CT -> nSvc: NotificationService()
activate nSvc
nSvc --> CT: NotificationService
deactivate nSvc
CT -> OOS: ObjectOutputStream(socket.getOutputStream())
activate OOS
OOS --> CT: ObjectOutputStream
deactivate OOS
CT -> OIS: ObjectInputStream(socket.getInputStream())
activate OIS
OIS --> CT: ObjectInputStream
deactivate OIS
CT -> OIS: in.readObject()
activate OIS
OIS --> CT: Object
deactivate OIS
CT -> Pkt: obtainObject()
activate Pkt
Pkt --> CT: Object
deactivate Pkt
CT -> Auth: authenticate(credentials.username, credentials.password, credentials.roles)
activate Auth
Auth --> CT: session
deactivate Auth
CT -> OOS: writeObject(new Packet(VERSION, ComCodes.ACK.getValue(), "Connecting to server"))
activate OOS
deactivate OOS
CT -> Sock: Packet
deactivate CT
deactivate Sock
CA -> Pro: receive(ComCodes.ACK.getValue())
activate Pro
Pro -> OOS: writeObject(new Packet(VERSION, code, object))
activate OOS
deactivate OOS
Pro -> Pkt: in.readObject()
activate Pkt
Pkt --> Pro: Packet
deactivate Pkt
Pro -> CA: Packet
deactivate Pro
CA -> Pro: send(ComCodes.LSTOPNS.getValue(), "")
activate Pro
Pro -> OOS: writeObject(new Packet(VERSION, code, object))
activate OOS
deactivate OOS
Pro -> Pkt: in.readObject()
activate Pkt
Pkt --> Pro: Packet
deactivate Pkt
Pro -> Sock: Packet
activate Sock
deactivate Pro
activate CT
Sock -> CT: Packet
CT -> OOS: writeObject(new Packet(VERSION, ComCodes.ACK.getValue(), "Connecting to server"))
activate OOS
deactivate OOS
CT -> Sock: Packet
LAC --> CT: listJobOpenings(session.get().authenticatedUser())
activate LAC
LAC -> CT: map
deactivate LAC
CT -> OOS: writeObject(new Packet(VERSION, ComCodes.LSTOPNS.getValue(), map))
activate OOS
deactivate OOS
CT -> Sock: Packet
deactivate CT
Sock -> Pro: Packet
CA -> Pro: receive(ComCodes.LSTOPNS.getValue())
activate Pro
Pro -> OOS: writeObject(new Packet(VERSION, code, object))
activate OOS
deactivate OOS
Pro -> Pkt: in.readObject()
activate Pkt
Pkt --> Pro: Packet
deactivate Pkt
Pro -> CA: Packet
deactivate Pro
loop for each job opening
CA -> Can: Application
end
deactivate CA
deactivate Sock
deactivate Can


@enduml