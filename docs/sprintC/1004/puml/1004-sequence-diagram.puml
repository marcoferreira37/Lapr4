@startuml
participant "Customer Manager" as u
participant ":EditJobOpeningUI" as ui <<UI>>
participant ":EditJobOpeningController" as controller <<Application>>
participant ":Editable" as editable <<Domain>>
participant ":JobOpeningService" as service <<Application>>
participant ":JobOpening" as jobOpening <<Domain>>
database ":JobOpeningRepository" as repository <<Persistence>>


autonumber

activate u
u -> ui: Requests to update job opening
activate ui
ui --> u: Requests to input job reference
deactivate ui
u -> ui: Inputs job reference
activate ui
ui -> controller: existsJobReference(jobReference)
activate controller
controller -> service: jobReferenceToJobOpening(jobReference)
activate service
service -> repository: findJobOpeningByFullReference(String jobReference)
activate repository
repository --> service: return jobOpening
deactivate repository
service --> controller: return jobOpening
deactivate service
controller -> controller: save JobOpening
activate controller
deactivate controller
controller --> ui: return true
deactivate controller
ui --> u: displays job opening and asks if user wants to update the description
deactivate ui
u -> ui: inputs option (yes/no)
activate ui

ui -> controller: edits.add(Editable.DESCRIPTION)
activate controller
deactivate controller
ui --> u : asks if user wants to update the address
deactivate ui
u -> ui: inputs option (yes/no)
activate ui
ui -> controller: edits.add(Editable.ADDRESS)
activate controller
deactivate controller

ui --> u : asks if user wants to update the job title
deactivate ui
u -> ui: inputs option (yes/no)
activate ui
ui -> controller: edits.add(Editable.JOB_TITLE)
activate controller
deactivate controller
ui --> u : asks if user wants to update the mode
deactivate ui
u -> ui: inputs option (yes/no)
activate ui
ui -> controller: edits.add(Editable.Mode)
activate controller
deactivate controller
ui --> u : asks if user wants to update the contract type
deactivate ui
u -> ui: inputs option (yes/no)
activate ui
ui -> controller: edits.add(Editable.CONTRACT_TYPE)
activate controller
deactivate controller
ui --> u : asks if user wants to update the number of vacancies
deactivate ui
u -> ui: inputs option (yes/no)
activate ui
ui -> controller: edits.add(Editable.VACANCIES_NUMBER)
activate controller
deactivate controller

ui -> controller: cycleEdits()

loop for each Editable in edits
    alt Editable.DESCRIPTION
    activate controller
        controller -> service: editDescription()
        activate service
        service --> controller: editString(Editable.DESCRIPTION)
        deactivate service
        controller --> ui: editString(Editable.DESCRIPTION)
        deactivate controller
        ui --> u: Requests new value for description
        deactivate ui
        u -> ui: Inputs new description
        activate ui
        ui -> controller: saveDescription(description)
        activate controller
        controller -> service: saveDescription(description)
        activate service
        service -> jobOpening: setDescription(description)
        activate jobOpening
        jobOpening -> jobOpening: this.description = description
        jobOpening --> service: return jobOpening
        deactivate jobOpening
        service -> repository: save(jobOpening)
        activate repository
        repository --> service: return jobOpening
        deactivate repository
        service --> controller: return jobOpening
        deactivate service
        deactivate controller
    else Editable.ADDRESS

        controller -> service: editAddress()
        activate service

    else Editable.JOB_TITLE
        controller -> service: editJobTitle()
    else Editable.Mode
        controller -> service: editMode()
    else Editable.CONTRACT_TYPE
        controller -> service: editContractType()
    else Editable.VACANCIES_NUMBER
        controller -> service: editVacanciesNumber()
    end

end
deactivate service
deactivate controller
ui --> u: displays job opening and success message
deactivate ui



@enduml