@startuml
Actor "Customer Manager" as User
participant ":UpdateJobOpeningUI" as UI <<UI>>
participant ":EditJobOpeningController" as Controller <<Application>>
participant ":JobOpeningService" as JobOpeningService <<Application>>

participant ":AuthorizationService" as Auth <<Application>>
participant ":UserSession" as UserSession <<Application>>
participant ":SystemUser" as SystemUser <<Domain>>
database "JobOpeningRepository" as jobrepo <<Repository>>
participant ":JobOpeningMapper" as JobOpeningMapper <<Domain>>


activate User

User -> UI: Chooses to edit a job opening
activate UI

UI -> Controller : Request to edit job opening
activate Controller

Controller -> Auth : ensureAuthenticatedUserHasAnyOf(BaseRoles.CUSTOMER_MANAGER, BaseRoles.ADMIN, BaseRoles.POWER_USER)
activate Auth

Auth --> Controller : User is authorized
deactivate Auth
Controller -> JobOpeningService : allJobsForCustomerManager()
activate JobOpeningService

JobOpeningService -> Auth: session()
activate Auth

Auth -> UserSession : authenticatedUser()
activate UserSession

UserSession -> SystemUser: user()
activate SystemUser

SystemUser --> UserSession : returns authenticatedUser
deactivate SystemUser
UserSession --> Auth : returns user
deactivate UserSession
Auth --> JobOpeningService : returns user
deactivate Auth
JobOpeningService -> jobrepo : findAllCreatedByUser(user)
activate jobrepo
jobrepo --> JobOpeningService : returns Iterable<JobOpening> jobOpenings
deactivate jobrepo
JobOpeningService --> Controller : returns (List <JobOpening) jobOpenings
deactivate JobOpeningService
Controller -> UI : displayListOfJobOpenings(jobOpenings)
deactivate Controller
UI -> User : displays jobOpenings
deactivate UI
User -> UI : Chooses to edit a job opening
activate UI

UI --> Controller: returns jobOpening index
activate Controller

Controller -> Controller: saves JobOpening

Controller -> UI : updateList(Edit.values())
deactivate Controller
loop until user chooses to stop
UI -> User : displays parameters to edit and option to stop
User --> UI : Chooses parameter to edit
UI -> UI: return list add(option)
end
UI --> Controller : returns List <Edit> edits
activate Controller

Controller -> JobOpeningService : toDto(jobOpening)
activate JobOpeningService

 JobOpeningService -> JobOpeningMapper: toDto(jobOpening)
 activate JobOpeningMapper

 JobOpeningMapper --> JobOpeningService: jobOpeningDto
 deactivate JobOpeningMapper

 JobOpeningService --> Controller: jobOpeningDto
  deactivate JobOpeningService

loop for each edit

alt edit is a string
Controller -> UI : updateString(Edit.StringField)
UI -> User : request to update string field
User --> UI : enters new value
UI --> Controller : returns new value
end

alt edit is a number
Controller -> UI : updateNumber(Edit.NumberField)
UI -> User : request to update string field
User --> UI : enters new value
UI --> Controller : returns new value
end

alt edit is a Enum
Controller -> UI : updateEnum(Edit.EnumField)
UI -> User : request to update string field
User --> UI : enters new value
UI --> Controller : returns new value
end

Controller -> JobOpeningService : updateJobOpening(jobOpeningDto, edit, value)
activate JobOpeningService

JobOpeningService --> Controller : returns jobOpeningDto
deactivate JobOpeningService
end

Controller --> UI : displayJobOpening(jobOpeningDTO)

UI -> User : displays updated jobOpening

Controller -> JobOpeningService : toDomain(jobOpeningDto)
activate JobOpeningService

JobOpeningService -> JobOpeningMapper: toDomain(jobOpeningDto)
activate JobOpeningMapper

 JobOpeningMapper --> JobOpeningService: jobOpening
deactivate JobOpeningMapper

 JobOpeningService -> jobrepo: save(jobOpening)
 activate jobrepo
 jobrepo --> JobOpeningService: saved jobOpening
deactivate jobrepo
JobOpeningService --> Controller: returns true
deactivate JobOpeningService
Controller --> UI : returns true
deactivate Controller
UI --> User : displays success message
deactivate UI
@enduml