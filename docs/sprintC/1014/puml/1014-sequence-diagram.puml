@startuml

actor "Customer Manager" as Agent
participant ":RecordInterviewUI" as ui <<UI>>
participant ":RecordInterviewController" as ctrl <<Application>>
participant ":JobOpeningApplicationService" as jobApServ <<Service>>
database ":JobOpeningApplicationRepository" as jobRepo <<Persistence>>
'participant ":ApplicationService" as appServ <<Service>>
database ":InterviewRepository" as intRepo <<Persistence>>
'participant "app:JobOpeningApplication" as app <<Domain>>
participant "interview:Interview" as interview <<Domain>>


autonumber

activate Agent

Agent -> ui: Record the time and date for an interview with a candidate
activate ui

ui -> ctrl: getJobOpeningApplication()



activate ctrl

ctrl -> jobApServ: getJobOpeningApplication()

activate jobApServ

jobApServ -> jobRepo: getJobOpeningApplication()
activate jobRepo

jobRepo --> jobApServ: JobOpeningApplications

deactivate jobRepo


jobApServ --> ctrl: JobOpeningApplications
deactivate jobApServ


ctrl --> ui: JobOpeningApplications
deactivate ctrl


ui --> Agent: JobOpeningApplications
deactivate ui



Agent -> ui: Record the time and date for an interview with the candidate
activate ui

ui -> ctrl: recordInterview(jobOpeningApplication, time, date)

activate ctrl

ctrl -> jobApServ: recordInterview(jobOpeningApplication, time, date)

activate jobApServ

jobApServ -> intRepo: recordInterview(jobOpeningApplication, time, date)

activate intRepo

intRepo -> jobApServ: Save interview
deactivate intRepo


jobApServ -> interview** : «creates»

jobApServ -> intRepo: getInterview(jobOpeningApplication, candidate, time, date)

activate intRepo

intRepo --> jobApServ: Interview
deactivate intRepo


jobApServ --> ctrl: Interview
deactivate jobApServ


ctrl --> ui: Interview
deactivate ctrl

ui --> Agent: Interview

deactivate ui






@enduml