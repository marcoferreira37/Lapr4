@startuml
actor "User" as User
participant ":PublishResultsUI" as UI <<UI>>
participant ":PublishResultsController" as Controller <<Application>>
participant "JobOpeningService" as JobOpeningService <<Application>>
participant "JobOpeningRepository" as JobOpeningRepo <<Persistence>>
participant "JobProcessService" as JobProcessService <<Application>>
participant "JobProcessRepository" as JobProcessRepo <<Persistence>>
participant "ApplicationService" as ApplicationService <<Application>>
participant "ApplicationRepository" as ApplicationRepo <<Persistence>>
participant "ClientUserService" as ClientUserService <<Application>>
participant "ClientUserRepository" as ClientUserRepo <<Persistence>>
autonumber


activate User

User -> UI : Asks to publish job opening results
activate UI

UI -> Controller : getJobOpenings()
activate Controller

Controller -> JobOpeningService : finishedJobProcesses()
activate JobOpeningService

JobOpeningService -> JobProcessRepo : findAll()
activate JobProcessRepo
JobProcessRepo --> JobOpeningService : jobProcesses
deactivate JobProcessRepo
JobOpeningService --> Controller : finishedJobProcesses
deactivate JobOpeningService
loop for each finished job process
Controller -> JobOpeningService : findByReference(jobReference)

activate JobOpeningService

JobOpeningService -> JobOpeningRepo : ofIdentity(jobReference)
activate JobOpeningRepo
JobOpeningRepo --> JobOpeningService : jobOpening
deactivate JobOpeningRepo

end

JobOpeningService --> Controller :jobOpenings
deactivate JobOpeningService

Controller --> UI: jobOpenings
deactivate Controller
UI-->User: Asks to select a job opening
deactivate UI
User -> UI : Selects a job opening
activate UI
UI -> Controller : getLoggedInUser()
activate Controller
Controller --> UI :cManager
deactivate Controller

UI -> Controller : getRankedApplications(jobOpening)
activate Controller

Controller -> ApplicationService : findByJobReference(jobReference)
activate ApplicationService

ApplicationService -> ApplicationRepo : findAll()

ApplicationService --> Controller : applications
deactivate ApplicationService

Controller -> ApplicationService : sortApplicationsByInterviewPoints(applications)
activate ApplicationService
ApplicationService --> Controller :sortedApplications
deactivate ApplicationService
loop for each vacancy
Controller -> ClientUserService : findClientUserByPhoneNumber(candidateId)
activate ClientUserService

ClientUserService -> ClientUserRepo : ofIdentity(candidateId)
end

ClientUserService --> Controller : selectedCandidates
deactivate ClientUserService

Controller --> UI : selectedCandidates
deactivate Controller

UI -> Controller : publishResults(fromUser, candidates, selectedJobOpening)
activate Controller
loop for each candidate
    Controller -> Controller : sendEmailToCandidate(cManager, candidate, selectedJobOpening)
    end
Controller -> Controller : sendEmailToCandidate(cManager, candidate, jobOpening)


Controller -> Controller : getClientByJobOpening(jobOpening)


Controller -> Controller : sendEmailToClient(cManager, customer, candidates, jobOpening)


deactivate Controller

 System --> User : Publishes results and displays operation success
deactivate UI

@enduml