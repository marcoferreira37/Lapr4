@startuml

actor "Customer Manager" as Agent
participant "EvaluateInterviewUI" as ui <<UI>>
participant ":EvaluateInterviewController" as ctrl <<Application>>
participant ":EvaluateInterviewService" as jobServ <<Service>>
participant "app:InterviewModel" as interview <<Plugin>>
participant "app:InterviewModelGrammarLexer" as lexer <<Plugin>>
participant "app:CommonTokenStream" as stream <<Plugin>>
participant "app:InterviewModelGrammarParser" as parser <<Plugin>>
participant "tree:ParseTree" as tree <<Tree>>
participant "app:Visitor" as visitor <<Plugin>>





autonumber

activate Agent

Agent -> ui: execute the process that evaluates (grades) the interviews for a job opening.
activate ui
ui -> ctrl: evaluateInterview()
deactivate ui

activate ctrl
ctrl -> jobServ: evaluateInterview()
deactivate ctrl

activate jobServ


jobServ -> interview: enterStart()
deactivate jobServ

activate interview

interview -> lexer: InterviewModelGrammarLexer(input)
activate lexer
lexer --> interview:
deactivate lexer

interview -> stream: new CommonTokenStream(lexer)
activate stream
stream --> interview:
deactivate stream

interview -> parser: InterviewModelGrammarParser(tokens)
activate parser
parser--> interview:
deactivate parser

interview -> tree: start()
activate tree
tree --> interview: tree
deactivate tree


interview -> visitor: visit(tree)
activate visitor

visitor -> visitor: visitEvaluation()
visitor -> visitor: extractSpecificPhrase()
visitor -> visitor: extractSpecificPhrase2()
visitor -> visitor: extractSpecificPhrase3()

visitor --> interview: map
deactivate visitor

interview -> RuleScore: calculateScore(map, score)
activate RuleScore

RuleScore -> RuleScore: calculateScore()

RuleScore --> interview: score
deactivate RuleScore

interview -> jobServ: score
deactivate interview
activate jobServ

jobServ -> ctrl: score
deactivate jobServ
activate ctrl
ctrl -> ui: score
deactivate ctrl
activate ui
ui -> Agent: score
deactivate ui



deactivate Agent



@enduml