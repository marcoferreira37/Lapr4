@startuml

actor "Customer Manager" as Agent
participant "EvaluateInterviewUI" as ui <<UI>>
participant ":EvaluateInterviewController" as ctrl <<Application>>
participant ":EvaluateInterviewService" as jobServ <<Service>>
participant ":JobInterviewRepository" as jobInterRepo <<Persistence>>
participant ":JobInterview" as jobInterview <<Domain>>
participant "app:InterviewModel" as interview <<Plugin>>
participant "app:InterviewModelGrammarLexer" as lexer <<Plugin>>
participant "app:CommonTokenStream" as stream <<Plugin>>
participant "app:InterviewModelGrammarParser" as parser <<Plugin>>
participant "tree:ParseTree" as tree <<Tree>>
participant "app:Visitor" as visitor <<Plugin>>






autonumber

activate Agent



Agent -> ui: execute the process that evaluates (grades) the interviews for a job opening.
activate ui

ui -> ctrl: findJobInterview()
deactivate ui

activate ctrl

ctrl -> jobServ: findJobInterview()
deactivate ctrl

activate jobServ

jobServ -> jobInterRepo: findAll()
activate jobInterRepo

jobInterRepo --> jobServ: jobInterviews
deactivate jobInterRepo

jobServ -> jobInterview: hasAnswers()
activate jobInterview

jobInterview --> jobServ: jobInterviewWithAnswers

deactivate jobInterview

jobServ --> ctrl: jobInterviewWithAnswers
deactivate jobServ

activate ctrl

ctrl -> ui: jobInterviewWithAnswers
deactivate ctrl

activate ui

ui --> Agent: List all job interviews with answers
deactivate ui

Agent -> ui: select a job interview to evaluate
activate ui


ui -> ctrl :findPath(chosenInterview)
deactivate ui

activate ctrl

ctrl -> jobServ: findPath(chosenInterview)
deactivate ctrl

activate jobServ

jobServ -> jobInterview: findPath(chosenInterview)
activate jobInterview

jobInterview --> jobServ: fileName
deactivate jobInterview

jobServ --> jobServ: resolve(fileName)
jobServ --> ctrl: filePath
deactivate jobServ

activate ctrl

ctrl -> ui: filePath
deactivate ctrl

activate ui





ui -> ctrl: evaluateInterview(filePath)
deactivate ui

activate ctrl

ctrl -> jobServ: evaluateInterview()
deactivate ctrl

activate jobServ


jobServ -> interview: enterStart()
deactivate jobServ

activate interview

interview -> lexer: InterviewModelGrammarLexer(input)
activate lexer
lexer --> interview:
deactivate lexer

interview -> stream: new CommonTokenStream(lexer)
activate stream
stream --> interview:
deactivate stream

interview -> parser: InterviewModelGrammarParser(tokens)
activate parser
parser--> interview:
deactivate parser

interview -> tree: start()
activate tree
tree --> interview: tree
deactivate tree


interview -> visitor: visit(tree)
activate visitor

visitor -> visitor: visitEvaluation()
visitor -> visitor: extractSpecificPhrase()
visitor -> visitor: extractSpecificPhrase2()
visitor -> visitor: extractSpecificPhrase3()

visitor --> interview: map
deactivate visitor

interview -> RuleScore: calculateScore(map, score)
activate RuleScore

RuleScore -> RuleScore: calculateScore()

RuleScore --> interview: score
deactivate RuleScore

interview -> jobServ: score
deactivate interview
activate jobServ

jobServ -> ctrl: score
deactivate jobServ
activate ctrl
ctrl -> ui: score
deactivate ctrl
activate ui
ui -> ctrl: setGrade(score, chosenInterview)
deactivate ui
activate ctrl
ctrl -> jobServ: setGrade(score, chosenInterview)
deactivate ctrl
activate jobServ
jobServ -> jobInterview: setGrade(score)
deactivate jobServ

activate jobInterview
jobInterview -> jobInterview: setGrade(score)
jobInterview --> jobServ: jobInterview
deactivate jobInterview
activate jobServ

jobServ --> ctrl: jobInterview
deactivate jobServ

activate ctrl

ctrl -> ui: jobInterview
deactivate ctrl

activate ui

ui -> ctrl: save(chosenInterview)
deactivate ui

activate ctrl

ctrl -> jobServ: save(chosenInterview)
deactivate ctrl

activate jobServ

jobServ -> jobInterRepo: save(chosenInterview)
activate jobInterRepo


jobInterRepo -> jobInterRepo: save(chosenInterview)
jobInterRepo --> jobServ: savedInterview

deactivate jobInterRepo

jobServ --> ctrl: savedInterview
deactivate jobServ


activate ctrl

ctrl -> ui: savedInterview

deactivate ctrl

activate ui

ui --> Agent: savedInterview
deactivate ui




deactivate Agent



@enduml