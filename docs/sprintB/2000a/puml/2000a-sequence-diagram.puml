@startuml
title Sequence Diagram (US 2000a - Register a candidate and create a corresponding user)

autonumber
actor Operator as Operator
participant AddCandidateUI as UI <<UI>>
participant AddCandidateController as CTRL <<Application>>
participant AuthorizationService as AS <<Service>>
participant CandidateManagementService as UMS <<Service>>
participant SystemCandidateBuilder as SUB <<Domain>>
participant Candidate as C <<Domain>>
participant CandidateRepository as CRepo <<Persistence>>


activate Operator
activate UI
Operator -> UI: Request to register candidate

UI -> CTRL**:create
activate CTRL

UI --> Operator: Request the firstName, lastName, email, telephoneNumber
deactivate UI
Operator -> UI: Types in the data (firstName, lastName, email, telephoneNumber)
activate UI
UI-> UI : .add(BaseRoles.CANDIDATE)
UI-> CTRL: addCandidate(firstName, lastName, email,telephoneNumber, createdOn)
CTRL -> AS : authorizationService()
activate AS
AS --> CTRL: authz
deactivate AS
CTRL->AS : ensureAuthenticatedUserHasAnyOf()
activate AS
deactivate AS
CTRL-> UMS : candidateSvc()
activate UMS
UMS-->CTRL: candidateSvc
deactivate UMS
CTRL-> UMS : registerNewCandidate(newUser, emailAddress, telephoneNumber)
activate UMS
UMS->SUB: .with(user, emailAddress, telephoneNumber)
activate SUB
UMS-> SUB: .build()
SUB--> UMS: user
deactivate SUB
UMS->CRepo: save the candidate
activate CRepo
deactivate CRepo
UMS-->CTRL: candidate
deactivate UMS
CTRL-->UI : candidate added successfully
deactivate CTRL
UI --> Operator: Creates the registered candidate and throws operation success
deactivate UI

@enduml