@startuml
title Sequence Diagram (US 2000a - Register a candidate and create a corresponding user)

autonumber
actor Operator as Operator
participant AddCandidateUI as UI <<UI>>
participant AddCandidateController as CTRL <<Application>>
participant Role as Role <<Domain>>
participant AuthorizationService as AS <<Domain>>
participant CandidateManagementService as UMS <<Domain>>
participant SystemCandidateBuilder as SUB <<Domain>>
database UserRepository as URepo <<Persistence>>
participant Candidate as C <<Domain>>
database CandidateRepository as CRepo <<Persistence>>


activate Operator
activate UI
Operator -> UI: Request to register candidate

UI -> CTRL**:create
activate CTRL
CTRL -> AS : authorizationService()
activate AS
AS --> CTRL: authz
deactivate AS
CTRL-> UMS : candidateSvc()
activate UMS
UMS-->CTRL: candidateSvc
deactivate UMS
deactivate CTRL
UI --> Operator: Request the username, password, \nfirstName, lastName, email, roleTypes
deactivate UI
Operator -> UI: Types in the data (username, password, \nfirstName, lastName, email, roleTypes)
activate UI
UI-->UI : saves the data
UI-> UI : .add(ROLE.CANDIDATE)
UI-> CTRL: addCandidate(username, password, \nfirstName, lastName, email, roleTypes)
activate CTRL
CTRL-->CTRL: addCandidate(username,password, \nfirstName,lastName, email, roles)
CTRL->AS : ensureAuthenticatedUserHasAnyOf()
activate AS
deactivate AS
CTRL-> UMS : registerNewCandidate(newUser, emailAddress, telephoneNumber)
activate UMS
UMS->SUB: .with(user, emailAddress, telephoneNumber)
activate SUB
UMS-> SUB: .build()
SUB--> UMS: user
deactivate SUB
UMS->URepo: save the user
activate URepo
deactivate URepo
UMS-->CTRL: user
deactivate UMS
CTRL-->CTRL: saves the user
CTRL-> C: Candidate (user)
activate C
C--> CTRL: candidate
deactivate C
CTRL->CRepo: save(candidate)
activate CRepo
deactivate CRepo
CTRL-->UI : candidate added successfully
deactivate CTRL
UI --> Operator: Creates the registered candidate and throws operation success
deactivate UI

@enduml