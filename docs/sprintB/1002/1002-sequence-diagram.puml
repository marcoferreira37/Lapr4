@startuml

title Register Job Opening - Sequence Diagram

autonumber
actor "Customer Manager" as M
participant AddJobOpeningUI  as UI <<UI>>
participant AddJobOpeningController as Controller <<Application>>
participant JobOpeningService as JS <<Service>>
participant CompanyRepository as CRepo <<Persistence>>
participant JobOpeningBuilder as JB <<Domain>>
participant JobOpening as JO <<Domain>>
participant JobOpeningRepository as JRepo <<Persistence>>

activate M
activate UI

M -> UI : requests to register a job opening

UI --> M : prompts for job details (Description, Vacancies Number and Address)

UI --> UI : checkDescription(description)

UI --> UI : checkVacanciesNumber(vacanciesNumber)

UI --> UI : checkAddress(address)

M -> UI : provides job details requested

UI --> M : shows available job openings modes ( Remote, Hybrid and Onsite)

M -> UI : selects job opening mode

UI --> M : shows available job openings types (Full Time and Part Time)

M -> UI : selects job opening type

UI --> M :  prompts for job opening requirements (Title or function and Company ID)

UI --> UI: checkTittleOrFunction(titleOrFunction)

UI --> UI: checkCompanyId(companyId)

M -> UI : provides job opening requirements

UI --> M : shows and requests confirmation for job registration

M -> UI : confirms job registration

UI -> Controller: addJobOpening(description, address, mode, contractType, titleOrFunction, vacanciesNumber, companyId)

activate Controller

Controller -> JS : create(description, address, mode, contractType, titleOrFunction, vacanciesNumber, companyId)

activate JS


JS -> CRepo: ofIdentity(companyId)

activate CRepo

CRepo --> JS: returns company

deactivate CRepo

JS -> JRepo: getLastIdFromCompany(companyId)

activate JRepo

JRepo --> JS: returns lastId

JS -> JB**: create


deactivate JRepo

'Controller -> JB: withDescription(description)
'Controller -> JB: withAddress(address)
'Controller -> JB: withMode(mode)
'Controller -> JB: withContractType(contractType)
'Controller -> JB: withTitleOrFunction(titleOrFunction)
'Controller -> JB: withVacanciesNumber(vacanciesNumber)
'Controller -> JB: withCompanyId(companyId)


deactivate JRepo

activate JB

JS -> JB: build()

note right of JS
  Passes the job opening attributes to the builder
end note

JB -> JO**: create(...)

deactivate JB





JS -> JRepo: save(jobOpening)


activate JRepo

JRepo --> JS: returns job opening

deactivate JRepo

JS --> Controller: returns job opening

deactivate JS

deactivate JB


deactivate JRepo
Controller --> UI: returns success
deactivate Controller

UI --> M: confirms successful registration

@enduml